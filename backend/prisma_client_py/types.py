# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: Optional[_str]
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    userAnswers: 'UserAnswerCreateManyNestedWithoutRelationsInput'
    wrongdoingQuestions: 'UserWrongdoingQuestionCreateManyNestedWithoutRelationsInput'
    dashboard: 'UserDashboardDataCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_googleId_Input = TypedDict(
    '_UserWhereUnique_googleId_Input',
    {
        'googleId': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_googleId_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: Optional[_str]
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    userAnswers: 'UserAnswerUpdateManyWithoutRelationsInput'
    wrongdoingQuestions: 'UserWrongdoingQuestionUpdateManyWithoutRelationsInput'
    dashboard: 'UserDashboardDataUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_googleId_OrderByInput = TypedDict(
    '_User_googleId_OrderByInput',
    {
        'googleId': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_googleId_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUser']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUser']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class UserDashboardDataIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class UserDashboardDataIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class UserDashboardDataIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class UserDashboardDataIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserDashboardDataArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserDashboardDataArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive1']


class QuestionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive2']


class QuestionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive3']


class QuestionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserRecursive4']


class QuestionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class QuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyQuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    question: Union[bool, 'QuestionArgsFromUserRecursive1']


class UserAnswerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    question: Union[bool, 'QuestionArgsFromUserRecursive2']


class UserAnswerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    question: Union[bool, 'QuestionArgsFromUserRecursive3']


class UserAnswerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    question: Union[bool, 'QuestionArgsFromUserRecursive4']


class UserAnswerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserAnswerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserAnswerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    question: Union[bool, 'QuestionArgsFromUserRecursive1']


class UserWrongdoingQuestionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    question: Union[bool, 'QuestionArgsFromUserRecursive2']


class UserWrongdoingQuestionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    question: Union[bool, 'QuestionArgsFromUserRecursive3']


class UserWrongdoingQuestionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    question: Union[bool, 'QuestionArgsFromUserRecursive4']


class UserWrongdoingQuestionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserWrongdoingQuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserWrongdoingQuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    googleId: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'
    dashboard: 'UserDashboardDataRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    googleId: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'
    dashboard: 'UserDashboardDataRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    googleId: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'
    dashboard: 'UserDashboardDataRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    googleId: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'
    dashboard: 'UserDashboardDataRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    googleId: Union[None, _str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'
    dashboard: 'UserDashboardDataRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    googleId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    googleId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    googleId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    googleId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    googleId: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    googleId: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    createdAt: bool
    updatedAt: bool
    googleId: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    createdAt: bool
    updatedAt: bool
    googleId: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'emailVerified': bool,
        'image': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'googleId': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'emailVerified': int,
        'image': int,
        'createdAt': int,
        'updatedAt': int,
        'googleId': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'createdAt',
    'updatedAt',
    'googleId',
    'accounts',
    'sessions',
    'userAnswers',
    'wrongdoingQuestions',
    'dashboard',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'createdAt',
    'updatedAt',
    'googleId',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'accounts',
        'sessions',
        'userAnswers',
        'wrongdoingQuestions',
        'dashboard',
    ]

# UserDashboardData types

class UserDashboardDataOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserDashboardData create method"""
    userId: _str
    totalPoints: _int
    previousSessionPoints: _int
    pointsHistory: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class UserDashboardDataCreateInput(UserDashboardDataOptionalCreateInput):
    """Required arguments to the UserDashboardData create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserDashboardDataOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserDashboardData create method, without relations"""
    userId: _str
    totalPoints: _int
    previousSessionPoints: _int
    pointsHistory: _str


class UserDashboardDataCreateWithoutRelationsInput(UserDashboardDataOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserDashboardData create method, without relations"""

class UserDashboardDataConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserDashboardDataCreateWithoutRelationsInput'
    where: 'UserDashboardDataWhereUniqueInput'

class UserDashboardDataCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserDashboardDataCreateWithoutRelationsInput'
    connect: 'UserDashboardDataWhereUniqueInput'
    connect_or_create: 'UserDashboardDataConnectOrCreateWithoutRelationsInput'


class UserDashboardDataCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserDashboardDataCreateWithoutRelationsInput', List['UserDashboardDataCreateWithoutRelationsInput']]
    connect: Union['UserDashboardDataWhereUniqueInput', List['UserDashboardDataWhereUniqueInput']]
    connect_or_create: Union['UserDashboardDataConnectOrCreateWithoutRelationsInput', List['UserDashboardDataConnectOrCreateWithoutRelationsInput']]

_UserDashboardDataWhereUnique_userId_Input = TypedDict(
    '_UserDashboardDataWhereUnique_userId_Input',
    {
        'userId': '_str',
    },
    total=True
)

UserDashboardDataWhereUniqueInput = _UserDashboardDataWhereUnique_userId_Input


class UserDashboardDataUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    totalPoints: Union[AtomicIntInput, _int]
    previousSessionPoints: Union[AtomicIntInput, _int]
    pointsHistory: _str
    user: 'UserUpdateOneWithoutRelationsInput'


class UserDashboardDataUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    totalPoints: Union[AtomicIntInput, _int]
    previousSessionPoints: Union[AtomicIntInput, _int]
    pointsHistory: _str


class UserDashboardDataUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserDashboardDataCreateWithoutRelationsInput']
    connect: List['UserDashboardDataWhereUniqueInput']
    connect_or_create: List['UserDashboardDataConnectOrCreateWithoutRelationsInput']
    set: List['UserDashboardDataWhereUniqueInput']
    disconnect: List['UserDashboardDataWhereUniqueInput']
    delete: List['UserDashboardDataWhereUniqueInput']

    # TODO
    # update: List['UserDashboardDataUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserDashboardDataUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserDashboardDataScalarWhereInput']
    # upsert: List['UserDashboardDataUpserteWithWhereUniqueWithoutRelationsInput']


class UserDashboardDataUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserDashboardDataCreateWithoutRelationsInput'
    connect: 'UserDashboardDataWhereUniqueInput'
    connect_or_create: 'UserDashboardDataConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserDashboardDataUpdateInput'
    # upsert: 'UserDashboardDataUpsertWithoutRelationsInput'


class UserDashboardDataUpsertInput(TypedDict):
    create: 'UserDashboardDataCreateInput'
    update: 'UserDashboardDataUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserDashboardData_userId_OrderByInput = TypedDict(
    '_UserDashboardData_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserDashboardData_totalPoints_OrderByInput = TypedDict(
    '_UserDashboardData_totalPoints_OrderByInput',
    {
        'totalPoints': 'SortOrder',
    },
    total=True
)

_UserDashboardData_previousSessionPoints_OrderByInput = TypedDict(
    '_UserDashboardData_previousSessionPoints_OrderByInput',
    {
        'previousSessionPoints': 'SortOrder',
    },
    total=True
)

_UserDashboardData_pointsHistory_OrderByInput = TypedDict(
    '_UserDashboardData_pointsHistory_OrderByInput',
    {
        'pointsHistory': 'SortOrder',
    },
    total=True
)

_UserDashboardData_RelevanceInner = TypedDict(
    '_UserDashboardData_RelevanceInner',
    {
        'fields': 'List[UserDashboardDataScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserDashboardData_RelevanceOrderByInput = TypedDict(
    '_UserDashboardData_RelevanceOrderByInput',
    {
        '_relevance': '_UserDashboardData_RelevanceInner',
    },
    total=True
)

UserDashboardDataOrderByInput = Union[
    '_UserDashboardData_userId_OrderByInput',
    '_UserDashboardData_totalPoints_OrderByInput',
    '_UserDashboardData_previousSessionPoints_OrderByInput',
    '_UserDashboardData_pointsHistory_OrderByInput',
    '_UserDashboardData_RelevanceOrderByInput',
]



# recursive UserDashboardData types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserDashboardDataRelationFilter = TypedDict(
    'UserDashboardDataRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserDashboardDataListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserDashboardDataInclude(TypedDict, total=False):
    """UserDashboardData relational arguments"""
    user: Union[bool, 'UserArgsFromUserDashboardData']


    

class UserIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserDashboardDataRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserDashboardDataRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserDashboardDataRecursive1']


class UserIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserDashboardDataRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserDashboardDataRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserDashboardDataRecursive2']


class UserIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserDashboardDataRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserDashboardDataRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserDashboardDataRecursive3']


class UserIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserDashboardDataRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserDashboardDataRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserDashboardDataRecursive4']


class UserIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class UserArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyUserArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive1']


class UserDashboardDataIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive2']


class UserDashboardDataIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive3']


class UserDashboardDataIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive4']


class UserDashboardDataIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class UserDashboardDataArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyUserDashboardDataArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive1']


class AccountIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive2']


class AccountIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive3']


class AccountIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive4']


class AccountIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class AccountArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyAccountArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive1']


class SessionIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive2']


class SessionIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive3']


class SessionIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive4']


class SessionIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class SessionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManySessionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""


class VerificationTokenIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""


class VerificationTokenIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""


class VerificationTokenIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""


class VerificationTokenIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class VerificationTokenArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyVerificationTokenArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive1']


class QuestionIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive2']


class QuestionIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive3']


class QuestionIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserDashboardDataRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive4']


class QuestionIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class QuestionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyQuestionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive1']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive1']


class UserAnswerIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive2']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive2']


class UserAnswerIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive3']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive3']


class UserAnswerIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive4']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive4']


class UserAnswerIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class UserAnswerArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyUserAnswerArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromUserDashboardData(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive1']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive1']


class UserWrongdoingQuestionIncludeFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive2']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive2']


class UserWrongdoingQuestionIncludeFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive3']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive3']


class UserWrongdoingQuestionIncludeFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""
    user: Union[bool, 'UserArgsFromUserDashboardDataRecursive4']
    question: Union[bool, 'QuestionArgsFromUserDashboardDataRecursive4']


class UserWrongdoingQuestionIncludeFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Relational arguments for UserDashboardData"""

    

class UserWrongdoingQuestionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    
    

class FindManyUserWrongdoingQuestionArgsFromUserDashboardData(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive1(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive2(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive3(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromUserDashboardDataRecursive4(TypedDict, total=False):
    """Arguments for UserDashboardData"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyUserDashboardDataArgs = FindManyUserDashboardDataArgsFromUserDashboardData
FindFirstUserDashboardDataArgs = FindManyUserDashboardDataArgsFromUserDashboardData


    

class UserDashboardDataWhereInput(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    totalPoints: Union[_int, 'types.IntFilter']
    previousSessionPoints: Union[_int, 'types.IntFilter']
    pointsHistory: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserDashboardDataWhereInputRecursive1', List['UserDashboardDataWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserDashboardDataWhereInputRecursive1']
    OR: List['UserDashboardDataWhereInputRecursive1']
    NOT: List['UserDashboardDataWhereInputRecursive1']


class UserDashboardDataWhereInputRecursive1(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    totalPoints: Union[_int, 'types.IntFilter']
    previousSessionPoints: Union[_int, 'types.IntFilter']
    pointsHistory: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserDashboardDataWhereInputRecursive2', List['UserDashboardDataWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserDashboardDataWhereInputRecursive2']
    OR: List['UserDashboardDataWhereInputRecursive2']
    NOT: List['UserDashboardDataWhereInputRecursive2']


class UserDashboardDataWhereInputRecursive2(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    totalPoints: Union[_int, 'types.IntFilter']
    previousSessionPoints: Union[_int, 'types.IntFilter']
    pointsHistory: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserDashboardDataWhereInputRecursive3', List['UserDashboardDataWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserDashboardDataWhereInputRecursive3']
    OR: List['UserDashboardDataWhereInputRecursive3']
    NOT: List['UserDashboardDataWhereInputRecursive3']


class UserDashboardDataWhereInputRecursive3(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    totalPoints: Union[_int, 'types.IntFilter']
    previousSessionPoints: Union[_int, 'types.IntFilter']
    pointsHistory: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserDashboardDataWhereInputRecursive4', List['UserDashboardDataWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserDashboardDataWhereInputRecursive4']
    OR: List['UserDashboardDataWhereInputRecursive4']
    NOT: List['UserDashboardDataWhereInputRecursive4']


class UserDashboardDataWhereInputRecursive4(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    totalPoints: Union[_int, 'types.IntFilter']
    previousSessionPoints: Union[_int, 'types.IntFilter']
    pointsHistory: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate UserDashboardData types


    

class UserDashboardDataScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    totalPoints: Union[_int, 'types.IntWithAggregatesFilter']
    previousSessionPoints: Union[_int, 'types.IntWithAggregatesFilter']
    pointsHistory: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive1']


class UserDashboardDataScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    totalPoints: Union[_int, 'types.IntWithAggregatesFilter']
    previousSessionPoints: Union[_int, 'types.IntWithAggregatesFilter']
    pointsHistory: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive2']


class UserDashboardDataScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    totalPoints: Union[_int, 'types.IntWithAggregatesFilter']
    previousSessionPoints: Union[_int, 'types.IntWithAggregatesFilter']
    pointsHistory: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive3']


class UserDashboardDataScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    totalPoints: Union[_int, 'types.IntWithAggregatesFilter']
    previousSessionPoints: Union[_int, 'types.IntWithAggregatesFilter']
    pointsHistory: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserDashboardDataScalarWhereWithAggregatesInputRecursive4']


class UserDashboardDataScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserDashboardData arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    totalPoints: Union[_int, 'types.IntWithAggregatesFilter']
    previousSessionPoints: Union[_int, 'types.IntWithAggregatesFilter']
    pointsHistory: Union[_str, 'types.StringWithAggregatesFilter']



class UserDashboardDataGroupByOutput(TypedDict, total=False):
    userId: _str
    totalPoints: _int
    previousSessionPoints: _int
    pointsHistory: _str
    _sum: 'UserDashboardDataSumAggregateOutput'
    _avg: 'UserDashboardDataAvgAggregateOutput'
    _min: 'UserDashboardDataMinAggregateOutput'
    _max: 'UserDashboardDataMaxAggregateOutput'
    _count: 'UserDashboardDataCountAggregateOutput'


class UserDashboardDataAvgAggregateOutput(TypedDict, total=False):
    """UserDashboardData output for aggregating averages"""
    totalPoints: float
    previousSessionPoints: float


class UserDashboardDataSumAggregateOutput(TypedDict, total=False):
    """UserDashboardData output for aggregating sums"""
    totalPoints: _int
    previousSessionPoints: _int


class UserDashboardDataScalarAggregateOutput(TypedDict, total=False):
    """UserDashboardData output including scalar fields"""
    userId: _str
    totalPoints: _int
    previousSessionPoints: _int
    pointsHistory: _str


UserDashboardDataMinAggregateOutput = UserDashboardDataScalarAggregateOutput
UserDashboardDataMaxAggregateOutput = UserDashboardDataScalarAggregateOutput


class UserDashboardDataMaxAggregateInput(TypedDict, total=False):
    """UserDashboardData input for aggregating by max"""
    userId: bool
    totalPoints: bool
    previousSessionPoints: bool
    pointsHistory: bool


class UserDashboardDataMinAggregateInput(TypedDict, total=False):
    """UserDashboardData input for aggregating by min"""
    userId: bool
    totalPoints: bool
    previousSessionPoints: bool
    pointsHistory: bool


class UserDashboardDataNumberAggregateInput(TypedDict, total=False):
    """UserDashboardData input for aggregating numbers"""
    totalPoints: bool
    previousSessionPoints: bool


UserDashboardDataAvgAggregateInput = UserDashboardDataNumberAggregateInput
UserDashboardDataSumAggregateInput = UserDashboardDataNumberAggregateInput


UserDashboardDataCountAggregateInput = TypedDict(
    'UserDashboardDataCountAggregateInput',
    {
        'userId': bool,
        'totalPoints': bool,
        'previousSessionPoints': bool,
        'pointsHistory': bool,
        '_all': bool,
    },
    total=False,
)

UserDashboardDataCountAggregateOutput = TypedDict(
    'UserDashboardDataCountAggregateOutput',
    {
        'userId': int,
        'totalPoints': int,
        'previousSessionPoints': int,
        'pointsHistory': int,
        '_all': int,
    },
    total=False,
)


UserDashboardDataKeys = Literal[
    'userId',
    'totalPoints',
    'previousSessionPoints',
    'pointsHistory',
    'user',
]
UserDashboardDataScalarFieldKeys = Literal[
    'userId',
    'totalPoints',
    'previousSessionPoints',
    'pointsHistory',
]
UserDashboardDataScalarFieldKeysT = TypeVar('UserDashboardDataScalarFieldKeysT', bound=UserDashboardDataScalarFieldKeys)

UserDashboardDataRelationalFieldKeys = Literal[
        'user',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str

class AccountConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AccountCreateWithoutRelationsInput'
    where: 'AccountWhereUniqueInput'

class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]
    connect_or_create: Union['AccountConnectOrCreateWithoutRelationsInput', List['AccountConnectOrCreateWithoutRelationsInput']]

_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    connect_or_create: List['AccountConnectOrCreateWithoutRelationsInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

_Account_RelevanceInner = TypedDict(
    '_Account_RelevanceInner',
    {
        'fields': 'List[AccountScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Account_RelevanceOrderByInput = TypedDict(
    '_Account_RelevanceOrderByInput',
    {
        '_relevance': '_Account_RelevanceInner',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
    '_Account_RelevanceOrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class UserDashboardDataIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class UserDashboardDataIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class UserDashboardDataIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class UserDashboardDataIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserDashboardDataArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserDashboardDataArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive1']


class QuestionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive2']


class QuestionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive3']


class QuestionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromAccountRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromAccountRecursive4']


class QuestionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class QuestionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyQuestionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    question: Union[bool, 'QuestionArgsFromAccountRecursive1']


class UserAnswerIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    question: Union[bool, 'QuestionArgsFromAccountRecursive2']


class UserAnswerIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    question: Union[bool, 'QuestionArgsFromAccountRecursive3']


class UserAnswerIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    question: Union[bool, 'QuestionArgsFromAccountRecursive4']


class UserAnswerIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserAnswerArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserAnswerArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    question: Union[bool, 'QuestionArgsFromAccountRecursive1']


class UserWrongdoingQuestionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    question: Union[bool, 'QuestionArgsFromAccountRecursive2']


class UserWrongdoingQuestionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    question: Union[bool, 'QuestionArgsFromAccountRecursive3']


class UserWrongdoingQuestionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    question: Union[bool, 'QuestionArgsFromAccountRecursive4']


class UserWrongdoingQuestionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserWrongdoingQuestionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserWrongdoingQuestionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class UserDashboardDataIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class UserDashboardDataIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class UserDashboardDataIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class UserDashboardDataIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserDashboardDataArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserDashboardDataArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive1']


class QuestionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive2']


class QuestionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive3']


class QuestionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromSessionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromSessionRecursive4']


class QuestionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class QuestionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyQuestionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    question: Union[bool, 'QuestionArgsFromSessionRecursive1']


class UserAnswerIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    question: Union[bool, 'QuestionArgsFromSessionRecursive2']


class UserAnswerIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    question: Union[bool, 'QuestionArgsFromSessionRecursive3']


class UserAnswerIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    question: Union[bool, 'QuestionArgsFromSessionRecursive4']


class UserAnswerIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserAnswerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserAnswerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    question: Union[bool, 'QuestionArgsFromSessionRecursive1']


class UserWrongdoingQuestionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    question: Union[bool, 'QuestionArgsFromSessionRecursive2']


class UserWrongdoingQuestionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    question: Union[bool, 'QuestionArgsFromSessionRecursive3']


class UserWrongdoingQuestionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    question: Union[bool, 'QuestionArgsFromSessionRecursive4']


class UserWrongdoingQuestionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserWrongdoingQuestionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserWrongdoingQuestionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    identifier: _str
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    identifier: _str
    token: _str
    expires: datetime.datetime

class VerificationTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    where: 'VerificationTokenWhereUniqueInput'

class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]
    connect_or_create: Union['VerificationTokenConnectOrCreateWithoutRelationsInput', List['VerificationTokenConnectOrCreateWithoutRelationsInput']]

_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKeyInner = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKeyInner',
    {
        'identifier': '_str',
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKey = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKey',
    {
        'identifier_token': '_VerificationTokenCompoundidentifier_tokenKeyInner',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_token_Input',
    '_VerificationTokenCompoundidentifier_tokenKey',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    connect_or_create: List['VerificationTokenConnectOrCreateWithoutRelationsInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_identifier_OrderByInput = TypedDict(
    '_VerificationToken_identifier_OrderByInput',
    {
        'identifier': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_OrderByInput = TypedDict(
    '_VerificationToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceInner = TypedDict(
    '_VerificationToken_RelevanceInner',
    {
        'fields': 'List[VerificationTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceOrderByInput = TypedDict(
    '_VerificationToken_RelevanceOrderByInput',
    {
        '_relevance': '_VerificationToken_RelevanceInner',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_identifier_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_expires_OrderByInput',
    '_VerificationToken_RelevanceOrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""


    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class UserDashboardDataIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class UserDashboardDataIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class UserDashboardDataIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class UserDashboardDataIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserDashboardDataArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserDashboardDataArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive1']


class QuestionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive2']


class QuestionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive3']


class QuestionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromVerificationTokenRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive4']


class QuestionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class QuestionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyQuestionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive1']


class UserAnswerIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive2']


class UserAnswerIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive3']


class UserAnswerIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive4']


class UserAnswerIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserAnswerArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserAnswerArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive1']


class UserWrongdoingQuestionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive2']


class UserWrongdoingQuestionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive3']


class UserWrongdoingQuestionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    question: Union[bool, 'QuestionArgsFromVerificationTokenRecursive4']


class UserWrongdoingQuestionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserWrongdoingQuestionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserWrongdoingQuestionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    identifier: _str
    token: _str
    expires: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    identifier: _str
    token: _str
    expires: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'identifier': bool,
        'token': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'identifier': int,
        'token': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = _NoneType

# Question types

class QuestionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Question create method"""
    id: _str
    topicId: Optional[_str]
    difficultyLevel: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userAnswers: 'UserAnswerCreateManyNestedWithoutRelationsInput'
    wrongdoingQuestions: 'UserWrongdoingQuestionCreateManyNestedWithoutRelationsInput'


class QuestionCreateInput(QuestionOptionalCreateInput):
    """Required arguments to the Question create method"""
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class QuestionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Question create method, without relations"""
    id: _str
    topicId: Optional[_str]
    difficultyLevel: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class QuestionCreateWithoutRelationsInput(QuestionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Question create method, without relations"""
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str

class QuestionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'QuestionCreateWithoutRelationsInput'
    where: 'QuestionWhereUniqueInput'

class QuestionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'
    connect_or_create: 'QuestionConnectOrCreateWithoutRelationsInput'


class QuestionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['QuestionCreateWithoutRelationsInput', List['QuestionCreateWithoutRelationsInput']]
    connect: Union['QuestionWhereUniqueInput', List['QuestionWhereUniqueInput']]
    connect_or_create: Union['QuestionConnectOrCreateWithoutRelationsInput', List['QuestionConnectOrCreateWithoutRelationsInput']]

_QuestionWhereUnique_id_Input = TypedDict(
    '_QuestionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

QuestionWhereUniqueInput = _QuestionWhereUnique_id_Input


class QuestionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str
    topicId: Optional[_str]
    difficultyLevel: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userAnswers: 'UserAnswerUpdateManyWithoutRelationsInput'
    wrongdoingQuestions: 'UserWrongdoingQuestionUpdateManyWithoutRelationsInput'


class QuestionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str
    topicId: Optional[_str]
    difficultyLevel: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class QuestionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['QuestionCreateWithoutRelationsInput']
    connect: List['QuestionWhereUniqueInput']
    connect_or_create: List['QuestionConnectOrCreateWithoutRelationsInput']
    set: List['QuestionWhereUniqueInput']
    disconnect: List['QuestionWhereUniqueInput']
    delete: List['QuestionWhereUniqueInput']

    # TODO
    # update: List['QuestionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['QuestionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['QuestionScalarWhereInput']
    # upsert: List['QuestionUpserteWithWhereUniqueWithoutRelationsInput']


class QuestionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'
    connect_or_create: 'QuestionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'QuestionUpdateInput'
    # upsert: 'QuestionUpsertWithoutRelationsInput'


class QuestionUpsertInput(TypedDict):
    create: 'QuestionCreateInput'
    update: 'QuestionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Question_id_OrderByInput = TypedDict(
    '_Question_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Question_questionText_OrderByInput = TypedDict(
    '_Question_questionText_OrderByInput',
    {
        'questionText': 'SortOrder',
    },
    total=True
)

_Question_options_OrderByInput = TypedDict(
    '_Question_options_OrderByInput',
    {
        'options': 'SortOrder',
    },
    total=True
)

_Question_correctAnswerId_OrderByInput = TypedDict(
    '_Question_correctAnswerId_OrderByInput',
    {
        'correctAnswerId': 'SortOrder',
    },
    total=True
)

_Question_topicId_OrderByInput = TypedDict(
    '_Question_topicId_OrderByInput',
    {
        'topicId': 'SortOrder',
    },
    total=True
)

_Question_difficultyLevel_OrderByInput = TypedDict(
    '_Question_difficultyLevel_OrderByInput',
    {
        'difficultyLevel': 'SortOrder',
    },
    total=True
)

_Question_createdAt_OrderByInput = TypedDict(
    '_Question_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Question_updatedAt_OrderByInput = TypedDict(
    '_Question_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Question_RelevanceInner = TypedDict(
    '_Question_RelevanceInner',
    {
        'fields': 'List[QuestionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Question_RelevanceOrderByInput = TypedDict(
    '_Question_RelevanceOrderByInput',
    {
        '_relevance': '_Question_RelevanceInner',
    },
    total=True
)

QuestionOrderByInput = Union[
    '_Question_id_OrderByInput',
    '_Question_questionText_OrderByInput',
    '_Question_options_OrderByInput',
    '_Question_correctAnswerId_OrderByInput',
    '_Question_topicId_OrderByInput',
    '_Question_difficultyLevel_OrderByInput',
    '_Question_createdAt_OrderByInput',
    '_Question_updatedAt_OrderByInput',
    '_Question_RelevanceOrderByInput',
]



# recursive Question types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

QuestionRelationFilter = TypedDict(
    'QuestionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class QuestionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class QuestionInclude(TypedDict, total=False):
    """Question relational arguments"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestion']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestion']


    

class UserIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    accounts: Union[bool, 'FindManyAccountArgsFromQuestionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromQuestionRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromQuestionRecursive1']


class UserIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    accounts: Union[bool, 'FindManyAccountArgsFromQuestionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromQuestionRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromQuestionRecursive2']


class UserIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    accounts: Union[bool, 'FindManyAccountArgsFromQuestionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromQuestionRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromQuestionRecursive3']


class UserIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    accounts: Union[bool, 'FindManyAccountArgsFromQuestionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromQuestionRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromQuestionRecursive4']


class UserIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class UserArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyUserArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive1']


class UserDashboardDataIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive2']


class UserDashboardDataIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive3']


class UserDashboardDataIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive4']


class UserDashboardDataIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class UserDashboardDataArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyUserDashboardDataArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive1']


class AccountIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive2']


class AccountIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive3']


class AccountIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive4']


class AccountIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class AccountArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyAccountArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive1']


class SessionIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive2']


class SessionIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive3']


class SessionIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive4']


class SessionIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class SessionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManySessionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""


class VerificationTokenIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""


class VerificationTokenIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""


class VerificationTokenIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""


class VerificationTokenIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class VerificationTokenArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyVerificationTokenArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive1']


class QuestionIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive2']


class QuestionIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive3']


class QuestionIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromQuestionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromQuestionRecursive4']


class QuestionIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class QuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyQuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive1']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive1']


class UserAnswerIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive2']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive2']


class UserAnswerIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive3']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive3']


class UserAnswerIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive4']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive4']


class UserAnswerIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class UserAnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyUserAnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive1']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive1']


class UserWrongdoingQuestionIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive2']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive2']


class UserWrongdoingQuestionIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive3']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive3']


class UserWrongdoingQuestionIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    user: Union[bool, 'UserArgsFromQuestionRecursive4']
    question: Union[bool, 'QuestionArgsFromQuestionRecursive4']


class UserWrongdoingQuestionIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class UserWrongdoingQuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyUserWrongdoingQuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyQuestionArgs = FindManyQuestionArgsFromQuestion
FindFirstQuestionArgs = FindManyQuestionArgsFromQuestion


    

class QuestionWhereInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    questionText: Union[_str, 'types.StringFilter']
    options: Union['fields.Json', 'types.JsonFilter']
    correctAnswerId: Union[_str, 'types.StringFilter']
    topicId: Union[None, _str, 'types.StringFilter']
    difficultyLevel: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive1', List['QuestionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive1']
    OR: List['QuestionWhereInputRecursive1']
    NOT: List['QuestionWhereInputRecursive1']


class QuestionWhereInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    questionText: Union[_str, 'types.StringFilter']
    options: Union['fields.Json', 'types.JsonFilter']
    correctAnswerId: Union[_str, 'types.StringFilter']
    topicId: Union[None, _str, 'types.StringFilter']
    difficultyLevel: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive2', List['QuestionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive2']
    OR: List['QuestionWhereInputRecursive2']
    NOT: List['QuestionWhereInputRecursive2']


class QuestionWhereInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    questionText: Union[_str, 'types.StringFilter']
    options: Union['fields.Json', 'types.JsonFilter']
    correctAnswerId: Union[_str, 'types.StringFilter']
    topicId: Union[None, _str, 'types.StringFilter']
    difficultyLevel: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive3', List['QuestionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive3']
    OR: List['QuestionWhereInputRecursive3']
    NOT: List['QuestionWhereInputRecursive3']


class QuestionWhereInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    questionText: Union[_str, 'types.StringFilter']
    options: Union['fields.Json', 'types.JsonFilter']
    correctAnswerId: Union[_str, 'types.StringFilter']
    topicId: Union[None, _str, 'types.StringFilter']
    difficultyLevel: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive4', List['QuestionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive4']
    OR: List['QuestionWhereInputRecursive4']
    NOT: List['QuestionWhereInputRecursive4']


class QuestionWhereInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    questionText: Union[_str, 'types.StringFilter']
    options: Union['fields.Json', 'types.JsonFilter']
    correctAnswerId: Union[_str, 'types.StringFilter']
    topicId: Union[None, _str, 'types.StringFilter']
    difficultyLevel: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userAnswers: 'UserAnswerListRelationFilter'
    wrongdoingQuestions: 'UserWrongdoingQuestionListRelationFilter'



# aggregate Question types


    

class QuestionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionText: Union[_str, 'types.StringWithAggregatesFilter']
    options: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    correctAnswerId: Union[_str, 'types.StringWithAggregatesFilter']
    topicId: Union[_str, 'types.StringWithAggregatesFilter']
    difficultyLevel: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive1']


class QuestionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionText: Union[_str, 'types.StringWithAggregatesFilter']
    options: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    correctAnswerId: Union[_str, 'types.StringWithAggregatesFilter']
    topicId: Union[_str, 'types.StringWithAggregatesFilter']
    difficultyLevel: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive2']


class QuestionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionText: Union[_str, 'types.StringWithAggregatesFilter']
    options: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    correctAnswerId: Union[_str, 'types.StringWithAggregatesFilter']
    topicId: Union[_str, 'types.StringWithAggregatesFilter']
    difficultyLevel: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive3']


class QuestionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionText: Union[_str, 'types.StringWithAggregatesFilter']
    options: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    correctAnswerId: Union[_str, 'types.StringWithAggregatesFilter']
    topicId: Union[_str, 'types.StringWithAggregatesFilter']
    difficultyLevel: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive4']


class QuestionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    questionText: Union[_str, 'types.StringWithAggregatesFilter']
    options: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    correctAnswerId: Union[_str, 'types.StringWithAggregatesFilter']
    topicId: Union[_str, 'types.StringWithAggregatesFilter']
    difficultyLevel: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class QuestionGroupByOutput(TypedDict, total=False):
    id: _str
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str
    topicId: _str
    difficultyLevel: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'QuestionSumAggregateOutput'
    _avg: 'QuestionAvgAggregateOutput'
    _min: 'QuestionMinAggregateOutput'
    _max: 'QuestionMaxAggregateOutput'
    _count: 'QuestionCountAggregateOutput'


class QuestionAvgAggregateOutput(TypedDict, total=False):
    """Question output for aggregating averages"""


class QuestionSumAggregateOutput(TypedDict, total=False):
    """Question output for aggregating sums"""


class QuestionScalarAggregateOutput(TypedDict, total=False):
    """Question output including scalar fields"""
    id: _str
    questionText: _str
    options: 'fields.Json'
    correctAnswerId: _str
    topicId: _str
    difficultyLevel: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


QuestionMinAggregateOutput = QuestionScalarAggregateOutput
QuestionMaxAggregateOutput = QuestionScalarAggregateOutput


class QuestionMaxAggregateInput(TypedDict, total=False):
    """Question input for aggregating by max"""
    id: bool
    questionText: bool
    options: bool
    correctAnswerId: bool
    topicId: bool
    difficultyLevel: bool
    createdAt: bool
    updatedAt: bool


class QuestionMinAggregateInput(TypedDict, total=False):
    """Question input for aggregating by min"""
    id: bool
    questionText: bool
    options: bool
    correctAnswerId: bool
    topicId: bool
    difficultyLevel: bool
    createdAt: bool
    updatedAt: bool


class QuestionNumberAggregateInput(TypedDict, total=False):
    """Question input for aggregating numbers"""


QuestionAvgAggregateInput = QuestionNumberAggregateInput
QuestionSumAggregateInput = QuestionNumberAggregateInput


QuestionCountAggregateInput = TypedDict(
    'QuestionCountAggregateInput',
    {
        'id': bool,
        'questionText': bool,
        'options': bool,
        'correctAnswerId': bool,
        'topicId': bool,
        'difficultyLevel': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

QuestionCountAggregateOutput = TypedDict(
    'QuestionCountAggregateOutput',
    {
        'id': int,
        'questionText': int,
        'options': int,
        'correctAnswerId': int,
        'topicId': int,
        'difficultyLevel': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


QuestionKeys = Literal[
    'id',
    'questionText',
    'options',
    'correctAnswerId',
    'topicId',
    'difficultyLevel',
    'createdAt',
    'updatedAt',
    'userAnswers',
    'wrongdoingQuestions',
]
QuestionScalarFieldKeys = Literal[
    'id',
    'questionText',
    'options',
    'correctAnswerId',
    'topicId',
    'difficultyLevel',
    'createdAt',
    'updatedAt',
]
QuestionScalarFieldKeysT = TypeVar('QuestionScalarFieldKeysT', bound=QuestionScalarFieldKeys)

QuestionRelationalFieldKeys = Literal[
        'userAnswers',
        'wrongdoingQuestions',
    ]

# UserAnswer types

class UserAnswerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserAnswer create method"""
    id: _str
    userId: _str
    questionId: _str
    timestamp: datetime.datetime
    quizSessionId: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'
    question: 'QuestionCreateNestedWithoutRelationsInput'


class UserAnswerCreateInput(UserAnswerOptionalCreateInput):
    """Required arguments to the UserAnswer create method"""
    selectedOptionId: _str
    isCorrect: _bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserAnswerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserAnswer create method, without relations"""
    id: _str
    userId: _str
    questionId: _str
    timestamp: datetime.datetime
    quizSessionId: Optional[_str]


class UserAnswerCreateWithoutRelationsInput(UserAnswerOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserAnswer create method, without relations"""
    selectedOptionId: _str
    isCorrect: _bool

class UserAnswerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserAnswerCreateWithoutRelationsInput'
    where: 'UserAnswerWhereUniqueInput'

class UserAnswerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAnswerCreateWithoutRelationsInput'
    connect: 'UserAnswerWhereUniqueInput'
    connect_or_create: 'UserAnswerConnectOrCreateWithoutRelationsInput'


class UserAnswerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserAnswerCreateWithoutRelationsInput', List['UserAnswerCreateWithoutRelationsInput']]
    connect: Union['UserAnswerWhereUniqueInput', List['UserAnswerWhereUniqueInput']]
    connect_or_create: Union['UserAnswerConnectOrCreateWithoutRelationsInput', List['UserAnswerConnectOrCreateWithoutRelationsInput']]

_UserAnswerWhereUnique_id_Input = TypedDict(
    '_UserAnswerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

UserAnswerWhereUniqueInput = _UserAnswerWhereUnique_id_Input


class UserAnswerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    selectedOptionId: _str
    isCorrect: _bool
    timestamp: datetime.datetime
    quizSessionId: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'
    question: 'QuestionUpdateOneWithoutRelationsInput'


class UserAnswerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    selectedOptionId: _str
    isCorrect: _bool
    timestamp: datetime.datetime
    quizSessionId: Optional[_str]


class UserAnswerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserAnswerCreateWithoutRelationsInput']
    connect: List['UserAnswerWhereUniqueInput']
    connect_or_create: List['UserAnswerConnectOrCreateWithoutRelationsInput']
    set: List['UserAnswerWhereUniqueInput']
    disconnect: List['UserAnswerWhereUniqueInput']
    delete: List['UserAnswerWhereUniqueInput']

    # TODO
    # update: List['UserAnswerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserAnswerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserAnswerScalarWhereInput']
    # upsert: List['UserAnswerUpserteWithWhereUniqueWithoutRelationsInput']


class UserAnswerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAnswerCreateWithoutRelationsInput'
    connect: 'UserAnswerWhereUniqueInput'
    connect_or_create: 'UserAnswerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserAnswerUpdateInput'
    # upsert: 'UserAnswerUpsertWithoutRelationsInput'


class UserAnswerUpsertInput(TypedDict):
    create: 'UserAnswerCreateInput'
    update: 'UserAnswerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserAnswer_id_OrderByInput = TypedDict(
    '_UserAnswer_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserAnswer_userId_OrderByInput = TypedDict(
    '_UserAnswer_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserAnswer_questionId_OrderByInput = TypedDict(
    '_UserAnswer_questionId_OrderByInput',
    {
        'questionId': 'SortOrder',
    },
    total=True
)

_UserAnswer_selectedOptionId_OrderByInput = TypedDict(
    '_UserAnswer_selectedOptionId_OrderByInput',
    {
        'selectedOptionId': 'SortOrder',
    },
    total=True
)

_UserAnswer_isCorrect_OrderByInput = TypedDict(
    '_UserAnswer_isCorrect_OrderByInput',
    {
        'isCorrect': 'SortOrder',
    },
    total=True
)

_UserAnswer_timestamp_OrderByInput = TypedDict(
    '_UserAnswer_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_UserAnswer_quizSessionId_OrderByInput = TypedDict(
    '_UserAnswer_quizSessionId_OrderByInput',
    {
        'quizSessionId': 'SortOrder',
    },
    total=True
)

_UserAnswer_RelevanceInner = TypedDict(
    '_UserAnswer_RelevanceInner',
    {
        'fields': 'List[UserAnswerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserAnswer_RelevanceOrderByInput = TypedDict(
    '_UserAnswer_RelevanceOrderByInput',
    {
        '_relevance': '_UserAnswer_RelevanceInner',
    },
    total=True
)

UserAnswerOrderByInput = Union[
    '_UserAnswer_id_OrderByInput',
    '_UserAnswer_userId_OrderByInput',
    '_UserAnswer_questionId_OrderByInput',
    '_UserAnswer_selectedOptionId_OrderByInput',
    '_UserAnswer_isCorrect_OrderByInput',
    '_UserAnswer_timestamp_OrderByInput',
    '_UserAnswer_quizSessionId_OrderByInput',
    '_UserAnswer_RelevanceOrderByInput',
]



# recursive UserAnswer types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserAnswerRelationFilter = TypedDict(
    'UserAnswerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserAnswerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserAnswerInclude(TypedDict, total=False):
    """UserAnswer relational arguments"""
    user: Union[bool, 'UserArgsFromUserAnswer']
    question: Union[bool, 'QuestionArgsFromUserAnswer']


    

class UserIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserAnswerRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserAnswerRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserAnswerRecursive1']


class UserIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserAnswerRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserAnswerRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserAnswerRecursive2']


class UserIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserAnswerRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserAnswerRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserAnswerRecursive3']


class UserIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserAnswerRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserAnswerRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserAnswerRecursive4']


class UserIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class UserArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyUserArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive1']


class UserDashboardDataIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive2']


class UserDashboardDataIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive3']


class UserDashboardDataIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive4']


class UserDashboardDataIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class UserDashboardDataArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyUserDashboardDataArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive1']


class AccountIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive2']


class AccountIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive3']


class AccountIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive4']


class AccountIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class AccountArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyAccountArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive1']


class SessionIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive2']


class SessionIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive3']


class SessionIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive4']


class SessionIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class SessionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManySessionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""


class VerificationTokenIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""


class VerificationTokenIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""


class VerificationTokenIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""


class VerificationTokenIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class VerificationTokenArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyVerificationTokenArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive1']


class QuestionIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive2']


class QuestionIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive3']


class QuestionIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserAnswerRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive4']


class QuestionIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class QuestionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyQuestionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive1']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive1']


class UserAnswerIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive2']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive2']


class UserAnswerIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive3']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive3']


class UserAnswerIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive4']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive4']


class UserAnswerIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class UserAnswerArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyUserAnswerArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromUserAnswer(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive1']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive1']


class UserWrongdoingQuestionIncludeFromUserAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive2']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive2']


class UserWrongdoingQuestionIncludeFromUserAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive3']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive3']


class UserWrongdoingQuestionIncludeFromUserAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for UserAnswer"""
    user: Union[bool, 'UserArgsFromUserAnswerRecursive4']
    question: Union[bool, 'QuestionArgsFromUserAnswerRecursive4']


class UserWrongdoingQuestionIncludeFromUserAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for UserAnswer"""

    

class UserWrongdoingQuestionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    
    

class FindManyUserWrongdoingQuestionArgsFromUserAnswer(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive1(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive2(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive3(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromUserAnswerRecursive4(TypedDict, total=False):
    """Arguments for UserAnswer"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyUserAnswerArgs = FindManyUserAnswerArgsFromUserAnswer
FindFirstUserAnswerArgs = FindManyUserAnswerArgsFromUserAnswer


    

class UserAnswerWhereInput(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    selectedOptionId: Union[_str, 'types.StringFilter']
    isCorrect: Union[_bool, 'types.BooleanFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    quizSessionId: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserAnswerWhereInputRecursive1', List['UserAnswerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserAnswerWhereInputRecursive1']
    OR: List['UserAnswerWhereInputRecursive1']
    NOT: List['UserAnswerWhereInputRecursive1']


class UserAnswerWhereInputRecursive1(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    selectedOptionId: Union[_str, 'types.StringFilter']
    isCorrect: Union[_bool, 'types.BooleanFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    quizSessionId: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserAnswerWhereInputRecursive2', List['UserAnswerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserAnswerWhereInputRecursive2']
    OR: List['UserAnswerWhereInputRecursive2']
    NOT: List['UserAnswerWhereInputRecursive2']


class UserAnswerWhereInputRecursive2(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    selectedOptionId: Union[_str, 'types.StringFilter']
    isCorrect: Union[_bool, 'types.BooleanFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    quizSessionId: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserAnswerWhereInputRecursive3', List['UserAnswerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserAnswerWhereInputRecursive3']
    OR: List['UserAnswerWhereInputRecursive3']
    NOT: List['UserAnswerWhereInputRecursive3']


class UserAnswerWhereInputRecursive3(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    selectedOptionId: Union[_str, 'types.StringFilter']
    isCorrect: Union[_bool, 'types.BooleanFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    quizSessionId: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserAnswerWhereInputRecursive4', List['UserAnswerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserAnswerWhereInputRecursive4']
    OR: List['UserAnswerWhereInputRecursive4']
    NOT: List['UserAnswerWhereInputRecursive4']


class UserAnswerWhereInputRecursive4(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    selectedOptionId: Union[_str, 'types.StringFilter']
    isCorrect: Union[_bool, 'types.BooleanFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    quizSessionId: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'



# aggregate UserAnswer types


    

class UserAnswerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    selectedOptionId: Union[_str, 'types.StringWithAggregatesFilter']
    isCorrect: Union[_bool, 'types.BooleanWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    quizSessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserAnswerScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserAnswerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserAnswerScalarWhereWithAggregatesInputRecursive1']


class UserAnswerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    selectedOptionId: Union[_str, 'types.StringWithAggregatesFilter']
    isCorrect: Union[_bool, 'types.BooleanWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    quizSessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserAnswerScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserAnswerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserAnswerScalarWhereWithAggregatesInputRecursive2']


class UserAnswerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    selectedOptionId: Union[_str, 'types.StringWithAggregatesFilter']
    isCorrect: Union[_bool, 'types.BooleanWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    quizSessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserAnswerScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserAnswerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserAnswerScalarWhereWithAggregatesInputRecursive3']


class UserAnswerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    selectedOptionId: Union[_str, 'types.StringWithAggregatesFilter']
    isCorrect: Union[_bool, 'types.BooleanWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    quizSessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserAnswerScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserAnswerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserAnswerScalarWhereWithAggregatesInputRecursive4']


class UserAnswerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserAnswer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    selectedOptionId: Union[_str, 'types.StringWithAggregatesFilter']
    isCorrect: Union[_bool, 'types.BooleanWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    quizSessionId: Union[_str, 'types.StringWithAggregatesFilter']



class UserAnswerGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    questionId: _str
    selectedOptionId: _str
    isCorrect: _bool
    timestamp: datetime.datetime
    quizSessionId: _str
    _sum: 'UserAnswerSumAggregateOutput'
    _avg: 'UserAnswerAvgAggregateOutput'
    _min: 'UserAnswerMinAggregateOutput'
    _max: 'UserAnswerMaxAggregateOutput'
    _count: 'UserAnswerCountAggregateOutput'


class UserAnswerAvgAggregateOutput(TypedDict, total=False):
    """UserAnswer output for aggregating averages"""


class UserAnswerSumAggregateOutput(TypedDict, total=False):
    """UserAnswer output for aggregating sums"""


class UserAnswerScalarAggregateOutput(TypedDict, total=False):
    """UserAnswer output including scalar fields"""
    id: _str
    userId: _str
    questionId: _str
    selectedOptionId: _str
    isCorrect: _bool
    timestamp: datetime.datetime
    quizSessionId: _str


UserAnswerMinAggregateOutput = UserAnswerScalarAggregateOutput
UserAnswerMaxAggregateOutput = UserAnswerScalarAggregateOutput


class UserAnswerMaxAggregateInput(TypedDict, total=False):
    """UserAnswer input for aggregating by max"""
    id: bool
    userId: bool
    questionId: bool
    selectedOptionId: bool
    isCorrect: bool
    timestamp: bool
    quizSessionId: bool


class UserAnswerMinAggregateInput(TypedDict, total=False):
    """UserAnswer input for aggregating by min"""
    id: bool
    userId: bool
    questionId: bool
    selectedOptionId: bool
    isCorrect: bool
    timestamp: bool
    quizSessionId: bool


class UserAnswerNumberAggregateInput(TypedDict, total=False):
    """UserAnswer input for aggregating numbers"""


UserAnswerAvgAggregateInput = UserAnswerNumberAggregateInput
UserAnswerSumAggregateInput = UserAnswerNumberAggregateInput


UserAnswerCountAggregateInput = TypedDict(
    'UserAnswerCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'questionId': bool,
        'selectedOptionId': bool,
        'isCorrect': bool,
        'timestamp': bool,
        'quizSessionId': bool,
        '_all': bool,
    },
    total=False,
)

UserAnswerCountAggregateOutput = TypedDict(
    'UserAnswerCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'questionId': int,
        'selectedOptionId': int,
        'isCorrect': int,
        'timestamp': int,
        'quizSessionId': int,
        '_all': int,
    },
    total=False,
)


UserAnswerKeys = Literal[
    'id',
    'userId',
    'questionId',
    'selectedOptionId',
    'isCorrect',
    'timestamp',
    'quizSessionId',
    'user',
    'question',
]
UserAnswerScalarFieldKeys = Literal[
    'id',
    'userId',
    'questionId',
    'selectedOptionId',
    'isCorrect',
    'timestamp',
    'quizSessionId',
]
UserAnswerScalarFieldKeysT = TypeVar('UserAnswerScalarFieldKeysT', bound=UserAnswerScalarFieldKeys)

UserAnswerRelationalFieldKeys = Literal[
        'user',
        'question',
    ]

# UserWrongdoingQuestion types

class UserWrongdoingQuestionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserWrongdoingQuestion create method"""
    id: _str
    userId: _str
    questionId: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool
    user: 'UserCreateNestedWithoutRelationsInput'
    question: 'QuestionCreateNestedWithoutRelationsInput'


class UserWrongdoingQuestionCreateInput(UserWrongdoingQuestionOptionalCreateInput):
    """Required arguments to the UserWrongdoingQuestion create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserWrongdoingQuestionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserWrongdoingQuestion create method, without relations"""
    id: _str
    userId: _str
    questionId: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool


class UserWrongdoingQuestionCreateWithoutRelationsInput(UserWrongdoingQuestionOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserWrongdoingQuestion create method, without relations"""

class UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserWrongdoingQuestionCreateWithoutRelationsInput'
    where: 'UserWrongdoingQuestionWhereUniqueInput'

class UserWrongdoingQuestionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserWrongdoingQuestionCreateWithoutRelationsInput'
    connect: 'UserWrongdoingQuestionWhereUniqueInput'
    connect_or_create: 'UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput'


class UserWrongdoingQuestionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserWrongdoingQuestionCreateWithoutRelationsInput', List['UserWrongdoingQuestionCreateWithoutRelationsInput']]
    connect: Union['UserWrongdoingQuestionWhereUniqueInput', List['UserWrongdoingQuestionWhereUniqueInput']]
    connect_or_create: Union['UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput', List['UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput']]

_UserWrongdoingQuestionWhereUnique_id_Input = TypedDict(
    '_UserWrongdoingQuestionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWrongdoingQuestionCompounduserId_questionIdKeyInner = TypedDict(
    '_UserWrongdoingQuestionCompounduserId_questionIdKeyInner',
    {
        'userId': '_str',
        'questionId': '_str',
    },
    total=True
)

_UserWrongdoingQuestionCompounduserId_questionIdKey = TypedDict(
    '_UserWrongdoingQuestionCompounduserId_questionIdKey',
    {
        'userId_questionId': '_UserWrongdoingQuestionCompounduserId_questionIdKeyInner',
    },
    total=True
)

UserWrongdoingQuestionWhereUniqueInput = Union[
    '_UserWrongdoingQuestionWhereUnique_id_Input',
    '_UserWrongdoingQuestionCompounduserId_questionIdKey',
]


class UserWrongdoingQuestionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool
    user: 'UserUpdateOneWithoutRelationsInput'
    question: 'QuestionUpdateOneWithoutRelationsInput'


class UserWrongdoingQuestionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool


class UserWrongdoingQuestionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserWrongdoingQuestionCreateWithoutRelationsInput']
    connect: List['UserWrongdoingQuestionWhereUniqueInput']
    connect_or_create: List['UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput']
    set: List['UserWrongdoingQuestionWhereUniqueInput']
    disconnect: List['UserWrongdoingQuestionWhereUniqueInput']
    delete: List['UserWrongdoingQuestionWhereUniqueInput']

    # TODO
    # update: List['UserWrongdoingQuestionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserWrongdoingQuestionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserWrongdoingQuestionScalarWhereInput']
    # upsert: List['UserWrongdoingQuestionUpserteWithWhereUniqueWithoutRelationsInput']


class UserWrongdoingQuestionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserWrongdoingQuestionCreateWithoutRelationsInput'
    connect: 'UserWrongdoingQuestionWhereUniqueInput'
    connect_or_create: 'UserWrongdoingQuestionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserWrongdoingQuestionUpdateInput'
    # upsert: 'UserWrongdoingQuestionUpsertWithoutRelationsInput'


class UserWrongdoingQuestionUpsertInput(TypedDict):
    create: 'UserWrongdoingQuestionCreateInput'
    update: 'UserWrongdoingQuestionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserWrongdoingQuestion_id_OrderByInput = TypedDict(
    '_UserWrongdoingQuestion_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_userId_OrderByInput = TypedDict(
    '_UserWrongdoingQuestion_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_questionId_OrderByInput = TypedDict(
    '_UserWrongdoingQuestion_questionId_OrderByInput',
    {
        'questionId': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_timestampMarkedWrong_OrderByInput = TypedDict(
    '_UserWrongdoingQuestion_timestampMarkedWrong_OrderByInput',
    {
        'timestampMarkedWrong': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_retestedCorrectly_OrderByInput = TypedDict(
    '_UserWrongdoingQuestion_retestedCorrectly_OrderByInput',
    {
        'retestedCorrectly': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_RelevanceInner = TypedDict(
    '_UserWrongdoingQuestion_RelevanceInner',
    {
        'fields': 'List[UserWrongdoingQuestionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserWrongdoingQuestion_RelevanceOrderByInput = TypedDict(
    '_UserWrongdoingQuestion_RelevanceOrderByInput',
    {
        '_relevance': '_UserWrongdoingQuestion_RelevanceInner',
    },
    total=True
)

UserWrongdoingQuestionOrderByInput = Union[
    '_UserWrongdoingQuestion_id_OrderByInput',
    '_UserWrongdoingQuestion_userId_OrderByInput',
    '_UserWrongdoingQuestion_questionId_OrderByInput',
    '_UserWrongdoingQuestion_timestampMarkedWrong_OrderByInput',
    '_UserWrongdoingQuestion_retestedCorrectly_OrderByInput',
    '_UserWrongdoingQuestion_RelevanceOrderByInput',
]



# recursive UserWrongdoingQuestion types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserWrongdoingQuestionRelationFilter = TypedDict(
    'UserWrongdoingQuestionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserWrongdoingQuestionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserWrongdoingQuestionInclude(TypedDict, total=False):
    """UserWrongdoingQuestion relational arguments"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestion']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestion']


    

class UserIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserWrongdoingQuestionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserWrongdoingQuestionRecursive1']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive1']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserWrongdoingQuestionRecursive1']


class UserIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserWrongdoingQuestionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserWrongdoingQuestionRecursive2']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive2']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserWrongdoingQuestionRecursive2']


class UserIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserWrongdoingQuestionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserWrongdoingQuestionRecursive3']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive3']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserWrongdoingQuestionRecursive3']


class UserIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserWrongdoingQuestionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserWrongdoingQuestionRecursive4']
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive4']
    dashboard: Union[bool, 'UserDashboardDataArgsFromUserWrongdoingQuestionRecursive4']


class UserIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class UserArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyUserArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserDashboardDataIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive1']


class UserDashboardDataIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive2']


class UserDashboardDataIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive3']


class UserDashboardDataIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive4']


class UserDashboardDataIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class UserDashboardDataArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class UserDashboardDataArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class UserDashboardDataArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class UserDashboardDataArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class UserDashboardDataArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyUserDashboardDataArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive1'


class FindManyUserDashboardDataArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive2'


class FindManyUserDashboardDataArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive3'


class FindManyUserDashboardDataArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    include: 'UserDashboardDataIncludeFromUserDashboardDataRecursive4'


class FindManyUserDashboardDataArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserDashboardDataOrderByInput', List['UserDashboardDataOrderByInput']]
    where: 'UserDashboardDataWhereInput'
    cursor: 'UserDashboardDataWhereUniqueInput'
    distinct: List['UserDashboardDataScalarFieldKeys']
    
    

class AccountIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive1']


class AccountIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive2']


class AccountIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive3']


class AccountIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive4']


class AccountIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class AccountArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyAccountArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive1']


class SessionIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive2']


class SessionIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive3']


class SessionIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive4']


class SessionIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class SessionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManySessionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""


class VerificationTokenIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""


class VerificationTokenIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""


class VerificationTokenIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""


class VerificationTokenIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class VerificationTokenArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyVerificationTokenArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class QuestionIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive1']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive1']


class QuestionIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive2']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive2']


class QuestionIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive3']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive3']


class QuestionIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    userAnswers: Union[bool, 'FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive4']
    wrongdoingQuestions: Union[bool, 'FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive4']


class QuestionIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class QuestionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyQuestionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class UserAnswerIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive1']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive1']


class UserAnswerIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive2']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive2']


class UserAnswerIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive3']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive3']


class UserAnswerIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive4']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive4']


class UserAnswerIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class UserAnswerArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class UserAnswerArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class UserAnswerArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class UserAnswerArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class UserAnswerArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyUserAnswerArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive1'


class FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive2'


class FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive3'


class FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    include: 'UserAnswerIncludeFromUserAnswerRecursive4'


class FindManyUserAnswerArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserAnswerOrderByInput', List['UserAnswerOrderByInput']]
    where: 'UserAnswerWhereInput'
    cursor: 'UserAnswerWhereUniqueInput'
    distinct: List['UserAnswerScalarFieldKeys']
    
    

class UserWrongdoingQuestionIncludeFromUserWrongdoingQuestion(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive1']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive1']


class UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive2']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive2']


class UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive3']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive3']


class UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""
    user: Union[bool, 'UserArgsFromUserWrongdoingQuestionRecursive4']
    question: Union[bool, 'QuestionArgsFromUserWrongdoingQuestionRecursive4']


class UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for UserWrongdoingQuestion"""

    

class UserWrongdoingQuestionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class UserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class UserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class UserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class UserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    
    

class FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestion(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive1'


class FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive1(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive2'


class FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive2(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive3'


class FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive3(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    include: 'UserWrongdoingQuestionIncludeFromUserWrongdoingQuestionRecursive4'


class FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestionRecursive4(TypedDict, total=False):
    """Arguments for UserWrongdoingQuestion"""
    take: int
    skip: int
    order_by: Union['UserWrongdoingQuestionOrderByInput', List['UserWrongdoingQuestionOrderByInput']]
    where: 'UserWrongdoingQuestionWhereInput'
    cursor: 'UserWrongdoingQuestionWhereUniqueInput'
    distinct: List['UserWrongdoingQuestionScalarFieldKeys']
    


FindManyUserWrongdoingQuestionArgs = FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestion
FindFirstUserWrongdoingQuestionArgs = FindManyUserWrongdoingQuestionArgsFromUserWrongdoingQuestion


    

class UserWrongdoingQuestionWhereInput(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserWrongdoingQuestionWhereInputRecursive1', List['UserWrongdoingQuestionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWrongdoingQuestionWhereInputRecursive1']
    OR: List['UserWrongdoingQuestionWhereInputRecursive1']
    NOT: List['UserWrongdoingQuestionWhereInputRecursive1']


class UserWrongdoingQuestionWhereInputRecursive1(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserWrongdoingQuestionWhereInputRecursive2', List['UserWrongdoingQuestionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWrongdoingQuestionWhereInputRecursive2']
    OR: List['UserWrongdoingQuestionWhereInputRecursive2']
    NOT: List['UserWrongdoingQuestionWhereInputRecursive2']


class UserWrongdoingQuestionWhereInputRecursive2(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserWrongdoingQuestionWhereInputRecursive3', List['UserWrongdoingQuestionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWrongdoingQuestionWhereInputRecursive3']
    OR: List['UserWrongdoingQuestionWhereInputRecursive3']
    NOT: List['UserWrongdoingQuestionWhereInputRecursive3']


class UserWrongdoingQuestionWhereInputRecursive3(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'

    # should be noted that AND and NOT should be Union['UserWrongdoingQuestionWhereInputRecursive4', List['UserWrongdoingQuestionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWrongdoingQuestionWhereInputRecursive4']
    OR: List['UserWrongdoingQuestionWhereInputRecursive4']
    NOT: List['UserWrongdoingQuestionWhereInputRecursive4']


class UserWrongdoingQuestionWhereInputRecursive4(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    questionId: Union[_str, 'types.StringFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    question: 'QuestionRelationFilter'



# aggregate UserWrongdoingQuestion types


    

class UserWrongdoingQuestionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive1']


class UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive2']


class UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive3']


class UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive4']


class UserWrongdoingQuestionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserWrongdoingQuestion arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    questionId: Union[_str, 'types.StringWithAggregatesFilter']
    timestampMarkedWrong: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    retestedCorrectly: Union[_bool, 'types.BooleanWithAggregatesFilter']



class UserWrongdoingQuestionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    questionId: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool
    _sum: 'UserWrongdoingQuestionSumAggregateOutput'
    _avg: 'UserWrongdoingQuestionAvgAggregateOutput'
    _min: 'UserWrongdoingQuestionMinAggregateOutput'
    _max: 'UserWrongdoingQuestionMaxAggregateOutput'
    _count: 'UserWrongdoingQuestionCountAggregateOutput'


class UserWrongdoingQuestionAvgAggregateOutput(TypedDict, total=False):
    """UserWrongdoingQuestion output for aggregating averages"""


class UserWrongdoingQuestionSumAggregateOutput(TypedDict, total=False):
    """UserWrongdoingQuestion output for aggregating sums"""


class UserWrongdoingQuestionScalarAggregateOutput(TypedDict, total=False):
    """UserWrongdoingQuestion output including scalar fields"""
    id: _str
    userId: _str
    questionId: _str
    timestampMarkedWrong: datetime.datetime
    retestedCorrectly: _bool


UserWrongdoingQuestionMinAggregateOutput = UserWrongdoingQuestionScalarAggregateOutput
UserWrongdoingQuestionMaxAggregateOutput = UserWrongdoingQuestionScalarAggregateOutput


class UserWrongdoingQuestionMaxAggregateInput(TypedDict, total=False):
    """UserWrongdoingQuestion input for aggregating by max"""
    id: bool
    userId: bool
    questionId: bool
    timestampMarkedWrong: bool
    retestedCorrectly: bool


class UserWrongdoingQuestionMinAggregateInput(TypedDict, total=False):
    """UserWrongdoingQuestion input for aggregating by min"""
    id: bool
    userId: bool
    questionId: bool
    timestampMarkedWrong: bool
    retestedCorrectly: bool


class UserWrongdoingQuestionNumberAggregateInput(TypedDict, total=False):
    """UserWrongdoingQuestion input for aggregating numbers"""


UserWrongdoingQuestionAvgAggregateInput = UserWrongdoingQuestionNumberAggregateInput
UserWrongdoingQuestionSumAggregateInput = UserWrongdoingQuestionNumberAggregateInput


UserWrongdoingQuestionCountAggregateInput = TypedDict(
    'UserWrongdoingQuestionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'questionId': bool,
        'timestampMarkedWrong': bool,
        'retestedCorrectly': bool,
        '_all': bool,
    },
    total=False,
)

UserWrongdoingQuestionCountAggregateOutput = TypedDict(
    'UserWrongdoingQuestionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'questionId': int,
        'timestampMarkedWrong': int,
        'retestedCorrectly': int,
        '_all': int,
    },
    total=False,
)


UserWrongdoingQuestionKeys = Literal[
    'id',
    'userId',
    'questionId',
    'timestampMarkedWrong',
    'retestedCorrectly',
    'user',
    'question',
]
UserWrongdoingQuestionScalarFieldKeys = Literal[
    'id',
    'userId',
    'questionId',
    'timestampMarkedWrong',
    'retestedCorrectly',
]
UserWrongdoingQuestionScalarFieldKeysT = TypeVar('UserWrongdoingQuestionScalarFieldKeysT', bound=UserWrongdoingQuestionScalarFieldKeys)

UserWrongdoingQuestionRelationalFieldKeys = Literal[
        'user',
        'question',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields